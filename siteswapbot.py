#!/usr/bin/python3
import praw
import subprocess
import re
import os.path
from imgur import *
from dbcmds import *

SUBREDDIT="juggling"
REDDIT_UNAME="siteswap-bot"
REDDIT_PWORD="FAKEPASS" #you didn't think it'd be that easy, did you?
DB_FILE="data.db"
IMGUR_BASE_URL="http://i.imgur.com/"
OUTFILE="out.gif"
INVALID_SITESWAP="invalid"
GENERATE_GIF_EXE="GenerateGif"

def execFile(name):
	f = open(name)
	exec(f.read(),globals(),locals())
	f.close()

def logToFile(txt,name = 'log.txt'):
	with open(name, 'w') as f:
		print(txt if txt is not None else 'None',file=f)

def findSiteswapsInComment(comment):
    regex = re.compile("[Ss](?:ite)?[Ss](?:wap)?: *([a-zA-Z\d(,\*\[\])]*[a-zA-Z\d\*\])]+)")
    siteswaps = regex.findall(comment)
    fixedSiteswaps = []
    for s in siteswaps:
        pcount = 0
        bcount = 0
        flag = False
        for i,c in enumerate(s):
            if c == "(":
                pcount += 1
            elif c == ")":
                pcount -= 1
            elif c == "[":
                bcount += 1
            elif c == "]":
                bcount -= 1
            if pcount < 0 or bcount < 0:
                flag = True
                fixedSiteswaps.append(s[:i])
                break
        if not flag:
            fixedSiteswaps.append(s)
    dupsRemoved = []
    for s in fixedSiteswaps:
        if not s in dupsRemoved:
            dupsRemoved.append(s)
    return dupsRemoved

def fetchRedditComments():
    global r
    r = praw.Reddit(user_agent="siteswap gif generating bot by /u/siteswap")
    juggling_sub = r.get_subreddit(SUBREDDIT)
    comments = [c for c in juggling_sub.get_comments()]
    return comments

def createGif(sswap):
    subprocess.call("rm " + OUTFILE, shell=True)
    subprocess.call([GENERATE_GIF_EXE + " \"" + sswap + '"'], shell=True)
    if not os.path.isfile(OUTFILE):
        return None
    return OUTFILE

def createReply(siteswaps,gifUrls):
    replyStr = "Siteswaps:"
    for (i,sswap) in enumerate(siteswaps):
        if gifUrls[i] == INVALID_SITESWAP:
            replyStr += "\n\n" + sswap + " is not a valid siteswap."
        else:
            replyStr += "\n\n[" + sswap + "](" + gifUrls[i] + ")"
    replyStr += "\n\nThis comment was generated by a bot.  [What's a siteswap?](http://www.juggling.org/help/siteswap/faq.html)"
    return replyStr

def replyToComment(comment):
    global r,DB,count
    siteswaps = findSiteswapsInComment(comment.body)
    if len(siteswaps) == 0:
        return
    count += 1
    if count > 1:
        return
    gifUrls = []
    for sswap in siteswaps:
        url = checkIfAlreadyUploaded(sswap)
        if url == None:
            sswapGif = createGif(sswap)
            if sswapGif is None:
                gifUrls.append(INVALID_SITESWAP)
            else:
                gifUrls.append(IMGUR_BASE_URL + uploadImage(sswapGif,title = sswap))
        else:
            gifUrls.append(IMGUR_BASE_URL + url)
    reply = createReply(siteswaps,gifUrls)
    if not r.is_logged_in():
        r.login(REDDIT_UNAME, REDDIT_PWORD)
    try:
        comment.reply(reply)
        DB.addData(comment.id)
    except Exception as e:
        logToFile(e)
    #TODO TO BE REMOVED ONCE KARMA IS HIGH ENOUGH
    #import time
    #time.sleep(600)

def main():
    global DB,count
    count = 0
    initializeImgurObject()
    DB = DataBase(DB_FILE)
    comments = fetchRedditComments()
    comments.reverse()
    for comment in comments:
        if not comment.author.name == REDDIT_UNAME and not DB.contains(comment.id):
            replyToComment(comment)
main()
